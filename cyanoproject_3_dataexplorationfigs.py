# -*- coding: utf-8 -*-
"""CyanoProject_3_DataExplorationFigs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ifuSW0zC7J4fMHtEksKGkKPYg0DVlx3k
"""

#### Figure for Q3:
## bar plot of how many reports of each belong to each metro for waterbody type
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

caData = pd.read_csv("CAFinalData_Metros.csv")

# filter out columns we care about & group by metro for total tallies
wb_data = caData.filter(["Google_Metro", "Total_Num_Reports", "Num_Reports_Lake", "Num_Reports_Rivers", "Num_Reports_Marine", "Num_Reports_Other"])
wb_data_grouped = wb_data.groupby(["Google_Metro"]).sum()
print(wb_data_grouped)

x = np.arange(3)
width = 0.1
plt.bar(x-0.2, wb_data_grouped["Num_Reports_Lake"], width, color='darkcyan')
plt.bar(x-0.1, wb_data_grouped["Num_Reports_Rivers"], width, color="turquoise")
plt.bar(x, wb_data_grouped["Num_Reports_Marine"], width, color="darkslategray")
plt.bar(x+0.1, wb_data_grouped["Num_Reports_Other"], width, color="lightblue")
plt.xticks(x, ["Los Angeles Area", "San Francisco Bay Area", "Sacramento/Central Valley"])
plt.ylabel("Number of Reports")
plt.legend(["Lake", "Rivers/Streams", "Marine", "Other"])
plt.show()

#### Another Figure for Q3:
## bar plot of how many reports of each belong to each metro for advisory level
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

caData = pd.read_csv("CAFinalData_Metros.csv")

# filter out columns we care about & group by metro for total tallies
ad_data = caData.filter(["Google_Metro", "Num_Reports_NoAdvisory", "Num_Reports_Caution", "Num_Reports_Warning", "Num_Reports_Danger", "Num_Reports_UnknownAdvisory"])
ad_data_grouped = ad_data.groupby(["Google_Metro"]).sum()
print(ad_data_grouped)

x = np.arange(3)
width = 0.1
plt.bar(x-0.2, ad_data_grouped["Num_Reports_NoAdvisory"], width, color='springgreen')
plt.bar(x-0.1, ad_data_grouped["Num_Reports_Caution"], width, color="yellow")
plt.bar(x, ad_data_grouped["Num_Reports_Warning"], width, color="darkorange")
plt.bar(x+0.1, ad_data_grouped["Num_Reports_Danger"], width, color="red")
plt.bar(x+0.2, ad_data_grouped["Num_Reports_UnknownAdvisory"], width, color="lightgray")
plt.xticks(x, ["Los Angeles Area", "San Francisco Bay Area", "Sacramento/Central Valley"])
plt.ylabel("Number of Reports")
plt.legend(["No Advisory", "Caution", "Warning", "Danger", "Advisory not reported"])
plt.show()

# remove no advisory reported
x = np.arange(3)
width = 0.1
plt.bar(x-0.2, ad_data_grouped["Num_Reports_NoAdvisory"], width, color='springgreen')
plt.bar(x-0.1, ad_data_grouped["Num_Reports_Caution"], width, color="yellow")
plt.bar(x, ad_data_grouped["Num_Reports_Warning"], width, color="darkorange")
plt.bar(x+0.1, ad_data_grouped["Num_Reports_Danger"], width, color="red")
#plt.bar(x+0.2, ad_data_grouped["Num_Reports_UnknownAdvisory"], width, color="lightgray")
plt.xticks(x, ["Los Angeles Area", "San Francisco Bay Area", "Sacramento/Central Valley"])
plt.ylabel("Number of Reports")
plt.legend(["No Advisory", "Caution", "Warning", "Danger"])
plt.show()

#### Figure for Q3:
## bar plot of how many reports per water body type for whole state
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

caData = pd.read_csv("CAFinalData_WholeState.csv")

# filter out columns we care about & group by month for total tallies
wb_data = caData.filter(["Month", "Total_Num_Reports", "Num_Reports_Lake", "Num_Reports_Rivers", "Num_Reports_Marine", "Num_Reports_Other"])
wb_data_grouped = wb_data.groupby(["Month"]).sum()
print(wb_data_grouped)

# assigning months to season
def assign_season(Month):
  if Month == (12 | 1 | 2):
    return "Winter"
  elif Month == (3 | 4 | 5):
    return "Spring"
  elif Month == (6 | 7 | 8):
    return "Summer"
  elif Month == (9 | 10 | 11):
    return "Fall"
  else:
    return "error"

#wb_data_grouped["Season"] = wb_data_grouped['Month'].apply(assign_season)
# not finishing this but it seems like a lot of reports get shoved to the first month yet again
# will investigate later if the dates are less specific
# looks like there may be multiple reports for each lake at different latitudes and longitudes for the lake
## ^^^IMPORTANT TO NOTE

# row with sum of all
caData.iloc["Num_Reports_Lake"].sum(axis=0)

## just doing raw counts for whole state then
plt.bar()